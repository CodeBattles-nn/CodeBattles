version: "3.9"
services:
  frontend:
    build: FRONTEND/.
    ports:
      - "8000:80"
    restart: unless-stopped
  backend:
    build: BACKEND/.
    environment:
      CHECKER_PORT: 7070
      DB_HOST: postgres
      DB_USERNAME: "postgres"
      DB_PASSWORD: "admin"
      DB_NAME: "cb"
      HASH_SALT: 4a5ecb2c236d1c4c3e670fcc76b8d1566c94d096bcf5f700511bb039507ad518
      REDIS_HOST: redis
      ADMIN_LOGIN: adminnn23
      ADMIN_PASSWORD: goodprog
      PYTHONUNBUFFERED: TRUE
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - postgres
    restart: unless-stopped
    
  redis:
    image: redis:alpine3.18
    ports:
        - 6379:6379
  postgres:
    image: postgres:13.3-alpine
    environment:
      POSTGRES_DB: "cb"
      POSTGRES_USER: "postgres"
      PGUSER: "postgres"
      POSTGRES_PASSWORD: "admin"
    ports:
      - "25565:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "cb" ]
      interval: 2s
      timeout: 2s
    restart: unless-stopped
  gateway:
    build: GATEWAY/.
    ports:
      - "2500:80"
    depends_on:
      - frontend
      - backend
  init_configurer:
    build: INIT_CONFIGURER/.
    environment:
      DB_HOST: postgres
      DB_USERNAME: "postgres"
      DB_PASSWORD: "admin"
      DB_NAME: "cb"
    links:
      - backend
      - postgres
    restart: unless-stopped
  checker-java:
    build:
      dockerfile: ./Java.Dockerfile
    restart: unless-stopped
  checker-python:
    build:
      dockerfile: ./Python.Dockerfile
    restart: unless-stopped
#  checker-pascal:
#    build:
#      dockerfile: ./Pascal.Dockerfile
#    restart: unless-stopped
